// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/group"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/groupuser"
	"github.com/chainloop-dev/chainloop/app/controlplane/pkg/data/ent/user"
	"github.com/google/uuid"
)

// GroupUserCreate is the builder for creating a GroupUser entity.
type GroupUserCreate struct {
	config
	mutation *GroupUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetGroupID sets the "group_id" field.
func (guc *GroupUserCreate) SetGroupID(u uuid.UUID) *GroupUserCreate {
	guc.mutation.SetGroupID(u)
	return guc
}

// SetNillableGroupID sets the "group_id" field if the given value is not nil.
func (guc *GroupUserCreate) SetNillableGroupID(u *uuid.UUID) *GroupUserCreate {
	if u != nil {
		guc.SetGroupID(*u)
	}
	return guc
}

// SetUserID sets the "user_id" field.
func (guc *GroupUserCreate) SetUserID(u uuid.UUID) *GroupUserCreate {
	guc.mutation.SetUserID(u)
	return guc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (guc *GroupUserCreate) SetNillableUserID(u *uuid.UUID) *GroupUserCreate {
	if u != nil {
		guc.SetUserID(*u)
	}
	return guc
}

// SetMaintainer sets the "maintainer" field.
func (guc *GroupUserCreate) SetMaintainer(b bool) *GroupUserCreate {
	guc.mutation.SetMaintainer(b)
	return guc
}

// SetNillableMaintainer sets the "maintainer" field if the given value is not nil.
func (guc *GroupUserCreate) SetNillableMaintainer(b *bool) *GroupUserCreate {
	if b != nil {
		guc.SetMaintainer(*b)
	}
	return guc
}

// SetCreatedAt sets the "created_at" field.
func (guc *GroupUserCreate) SetCreatedAt(t time.Time) *GroupUserCreate {
	guc.mutation.SetCreatedAt(t)
	return guc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guc *GroupUserCreate) SetNillableCreatedAt(t *time.Time) *GroupUserCreate {
	if t != nil {
		guc.SetCreatedAt(*t)
	}
	return guc
}

// SetUpdatedAt sets the "updated_at" field.
func (guc *GroupUserCreate) SetUpdatedAt(t time.Time) *GroupUserCreate {
	guc.mutation.SetUpdatedAt(t)
	return guc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (guc *GroupUserCreate) SetNillableUpdatedAt(t *time.Time) *GroupUserCreate {
	if t != nil {
		guc.SetUpdatedAt(*t)
	}
	return guc
}

// SetDeletedAt sets the "deleted_at" field.
func (guc *GroupUserCreate) SetDeletedAt(t time.Time) *GroupUserCreate {
	guc.mutation.SetDeletedAt(t)
	return guc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (guc *GroupUserCreate) SetNillableDeletedAt(t *time.Time) *GroupUserCreate {
	if t != nil {
		guc.SetDeletedAt(*t)
	}
	return guc
}

// SetGroup sets the "group" edge to the Group entity.
func (guc *GroupUserCreate) SetGroup(g *Group) *GroupUserCreate {
	return guc.SetGroupID(g.ID)
}

// SetUser sets the "user" edge to the User entity.
func (guc *GroupUserCreate) SetUser(u *User) *GroupUserCreate {
	return guc.SetUserID(u.ID)
}

// Mutation returns the GroupUserMutation object of the builder.
func (guc *GroupUserCreate) Mutation() *GroupUserMutation {
	return guc.mutation
}

// Save creates the GroupUser in the database.
func (guc *GroupUserCreate) Save(ctx context.Context) (*GroupUser, error) {
	guc.defaults()
	return withHooks(ctx, guc.sqlSave, guc.mutation, guc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (guc *GroupUserCreate) SaveX(ctx context.Context) *GroupUser {
	v, err := guc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (guc *GroupUserCreate) Exec(ctx context.Context) error {
	_, err := guc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guc *GroupUserCreate) ExecX(ctx context.Context) {
	if err := guc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guc *GroupUserCreate) defaults() {
	if _, ok := guc.mutation.GroupID(); !ok {
		v := groupuser.DefaultGroupID()
		guc.mutation.SetGroupID(v)
	}
	if _, ok := guc.mutation.UserID(); !ok {
		v := groupuser.DefaultUserID()
		guc.mutation.SetUserID(v)
	}
	if _, ok := guc.mutation.Maintainer(); !ok {
		v := groupuser.DefaultMaintainer
		guc.mutation.SetMaintainer(v)
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		v := groupuser.DefaultCreatedAt()
		guc.mutation.SetCreatedAt(v)
	}
	if _, ok := guc.mutation.UpdatedAt(); !ok {
		v := groupuser.DefaultUpdatedAt()
		guc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guc *GroupUserCreate) check() error {
	if _, ok := guc.mutation.GroupID(); !ok {
		return &ValidationError{Name: "group_id", err: errors.New(`ent: missing required field "GroupUser.group_id"`)}
	}
	if _, ok := guc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "GroupUser.user_id"`)}
	}
	if _, ok := guc.mutation.Maintainer(); !ok {
		return &ValidationError{Name: "maintainer", err: errors.New(`ent: missing required field "GroupUser.maintainer"`)}
	}
	if _, ok := guc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GroupUser.created_at"`)}
	}
	if _, ok := guc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GroupUser.updated_at"`)}
	}
	if len(guc.mutation.GroupIDs()) == 0 {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required edge "GroupUser.group"`)}
	}
	if len(guc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "GroupUser.user"`)}
	}
	return nil
}

func (guc *GroupUserCreate) sqlSave(ctx context.Context) (*GroupUser, error) {
	if err := guc.check(); err != nil {
		return nil, err
	}
	_node, _spec := guc.createSpec()
	if err := sqlgraph.CreateNode(ctx, guc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (guc *GroupUserCreate) createSpec() (*GroupUser, *sqlgraph.CreateSpec) {
	var (
		_node = &GroupUser{config: guc.config}
		_spec = sqlgraph.NewCreateSpec(groupuser.Table, nil)
	)
	_spec.OnConflict = guc.conflict
	if value, ok := guc.mutation.Maintainer(); ok {
		_spec.SetField(groupuser.FieldMaintainer, field.TypeBool, value)
		_node.Maintainer = value
	}
	if value, ok := guc.mutation.CreatedAt(); ok {
		_spec.SetField(groupuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := guc.mutation.UpdatedAt(); ok {
		_spec.SetField(groupuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := guc.mutation.DeletedAt(); ok {
		_spec.SetField(groupuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if nodes := guc.mutation.GroupIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.GroupTable,
			Columns: []string{groupuser.GroupColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.GroupID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := guc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupuser.UserTable,
			Columns: []string{groupuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupUser.Create().
//		SetGroupID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupUserUpsert) {
//			SetGroupID(v+v).
//		}).
//		Exec(ctx)
func (guc *GroupUserCreate) OnConflict(opts ...sql.ConflictOption) *GroupUserUpsertOne {
	guc.conflict = opts
	return &GroupUserUpsertOne{
		create: guc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (guc *GroupUserCreate) OnConflictColumns(columns ...string) *GroupUserUpsertOne {
	guc.conflict = append(guc.conflict, sql.ConflictColumns(columns...))
	return &GroupUserUpsertOne{
		create: guc,
	}
}

type (
	// GroupUserUpsertOne is the builder for "upsert"-ing
	//  one GroupUser node.
	GroupUserUpsertOne struct {
		create *GroupUserCreate
	}

	// GroupUserUpsert is the "OnConflict" setter.
	GroupUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetGroupID sets the "group_id" field.
func (u *GroupUserUpsert) SetGroupID(v uuid.UUID) *GroupUserUpsert {
	u.Set(groupuser.FieldGroupID, v)
	return u
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *GroupUserUpsert) UpdateGroupID() *GroupUserUpsert {
	u.SetExcluded(groupuser.FieldGroupID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *GroupUserUpsert) SetUserID(v uuid.UUID) *GroupUserUpsert {
	u.Set(groupuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GroupUserUpsert) UpdateUserID() *GroupUserUpsert {
	u.SetExcluded(groupuser.FieldUserID)
	return u
}

// SetMaintainer sets the "maintainer" field.
func (u *GroupUserUpsert) SetMaintainer(v bool) *GroupUserUpsert {
	u.Set(groupuser.FieldMaintainer, v)
	return u
}

// UpdateMaintainer sets the "maintainer" field to the value that was provided on create.
func (u *GroupUserUpsert) UpdateMaintainer() *GroupUserUpsert {
	u.SetExcluded(groupuser.FieldMaintainer)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GroupUserUpsert) SetUpdatedAt(v time.Time) *GroupUserUpsert {
	u.Set(groupuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GroupUserUpsert) UpdateUpdatedAt() *GroupUserUpsert {
	u.SetExcluded(groupuser.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GroupUserUpsert) SetDeletedAt(v time.Time) *GroupUserUpsert {
	u.Set(groupuser.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GroupUserUpsert) UpdateDeletedAt() *GroupUserUpsert {
	u.SetExcluded(groupuser.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GroupUserUpsert) ClearDeletedAt() *GroupUserUpsert {
	u.SetNull(groupuser.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GroupUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GroupUserUpsertOne) UpdateNewValues() *GroupUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(groupuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GroupUserUpsertOne) Ignore() *GroupUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupUserUpsertOne) DoNothing() *GroupUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupUserCreate.OnConflict
// documentation for more info.
func (u *GroupUserUpsertOne) Update(set func(*GroupUserUpsert)) *GroupUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetGroupID sets the "group_id" field.
func (u *GroupUserUpsertOne) SetGroupID(v uuid.UUID) *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *GroupUserUpsertOne) UpdateGroupID() *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateGroupID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GroupUserUpsertOne) SetUserID(v uuid.UUID) *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GroupUserUpsertOne) UpdateUserID() *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateUserID()
	})
}

// SetMaintainer sets the "maintainer" field.
func (u *GroupUserUpsertOne) SetMaintainer(v bool) *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetMaintainer(v)
	})
}

// UpdateMaintainer sets the "maintainer" field to the value that was provided on create.
func (u *GroupUserUpsertOne) UpdateMaintainer() *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateMaintainer()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GroupUserUpsertOne) SetUpdatedAt(v time.Time) *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GroupUserUpsertOne) UpdateUpdatedAt() *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GroupUserUpsertOne) SetDeletedAt(v time.Time) *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GroupUserUpsertOne) UpdateDeletedAt() *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GroupUserUpsertOne) ClearDeletedAt() *GroupUserUpsertOne {
	return u.Update(func(s *GroupUserUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *GroupUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GroupUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// GroupUserCreateBulk is the builder for creating many GroupUser entities in bulk.
type GroupUserCreateBulk struct {
	config
	err      error
	builders []*GroupUserCreate
	conflict []sql.ConflictOption
}

// Save creates the GroupUser entities in the database.
func (gucb *GroupUserCreateBulk) Save(ctx context.Context) ([]*GroupUser, error) {
	if gucb.err != nil {
		return nil, gucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gucb.builders))
	nodes := make([]*GroupUser, len(gucb.builders))
	mutators := make([]Mutator, len(gucb.builders))
	for i := range gucb.builders {
		func(i int, root context.Context) {
			builder := gucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GroupUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gucb *GroupUserCreateBulk) SaveX(ctx context.Context) []*GroupUser {
	v, err := gucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gucb *GroupUserCreateBulk) Exec(ctx context.Context) error {
	_, err := gucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gucb *GroupUserCreateBulk) ExecX(ctx context.Context) {
	if err := gucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GroupUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GroupUserUpsert) {
//			SetGroupID(v+v).
//		}).
//		Exec(ctx)
func (gucb *GroupUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *GroupUserUpsertBulk {
	gucb.conflict = opts
	return &GroupUserUpsertBulk{
		create: gucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GroupUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gucb *GroupUserCreateBulk) OnConflictColumns(columns ...string) *GroupUserUpsertBulk {
	gucb.conflict = append(gucb.conflict, sql.ConflictColumns(columns...))
	return &GroupUserUpsertBulk{
		create: gucb,
	}
}

// GroupUserUpsertBulk is the builder for "upsert"-ing
// a bulk of GroupUser nodes.
type GroupUserUpsertBulk struct {
	create *GroupUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GroupUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GroupUserUpsertBulk) UpdateNewValues() *GroupUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(groupuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GroupUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GroupUserUpsertBulk) Ignore() *GroupUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GroupUserUpsertBulk) DoNothing() *GroupUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GroupUserCreateBulk.OnConflict
// documentation for more info.
func (u *GroupUserUpsertBulk) Update(set func(*GroupUserUpsert)) *GroupUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GroupUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetGroupID sets the "group_id" field.
func (u *GroupUserUpsertBulk) SetGroupID(v uuid.UUID) *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetGroupID(v)
	})
}

// UpdateGroupID sets the "group_id" field to the value that was provided on create.
func (u *GroupUserUpsertBulk) UpdateGroupID() *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateGroupID()
	})
}

// SetUserID sets the "user_id" field.
func (u *GroupUserUpsertBulk) SetUserID(v uuid.UUID) *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *GroupUserUpsertBulk) UpdateUserID() *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateUserID()
	})
}

// SetMaintainer sets the "maintainer" field.
func (u *GroupUserUpsertBulk) SetMaintainer(v bool) *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetMaintainer(v)
	})
}

// UpdateMaintainer sets the "maintainer" field to the value that was provided on create.
func (u *GroupUserUpsertBulk) UpdateMaintainer() *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateMaintainer()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GroupUserUpsertBulk) SetUpdatedAt(v time.Time) *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GroupUserUpsertBulk) UpdateUpdatedAt() *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GroupUserUpsertBulk) SetDeletedAt(v time.Time) *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GroupUserUpsertBulk) UpdateDeletedAt() *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GroupUserUpsertBulk) ClearDeletedAt() *GroupUserUpsertBulk {
	return u.Update(func(s *GroupUserUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *GroupUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GroupUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GroupUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GroupUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
